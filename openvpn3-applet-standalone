#!/usr/bin/python

import gi
import os
import signal
import time

gi.require_versions({
    'Gtk': '3.0',
    'Gst': '1.0',
    'AppIndicator3': '0.1',
    'Notify': '0.7',
})

from gi.repository import Gtk as gtk
from gi.repository import AppIndicator3 as appindicator
from gi.repository import Notify as notify

APPINDICATOR_ID = 'openvpn3-applet'
ICON_PATH = os.path.dirname(os.fspath("/usr/share/icons/hicolor/scalable/apps/"))
OVPN_CONFIG="/path/to/config.ovpn"

class Indicator():
    def __init__(self):
        self.indicator = appindicator.Indicator.new(APPINDICATOR_ID, \
                ICON_PATH+"/nm-vpn-connecting01-symbolic.svg", \
                appindicator.IndicatorCategory.APPLICATION_STATUS)
        self.indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
        self.indicator.set_menu(self.build_menu())
        notify.init("sessionInfo")

    def build_menu(self):
        menu = gtk.Menu()

        command_one = gtk.MenuItem('Connect')    
        command_one.connect('activate', self.connect) 
        menu.append(command_one)                 
                                                 
        command_two = gtk.MenuItem('Disconnect') 
        command_two.connect('activate', self.disconnect)
        menu.append(command_two)                 
                                                 
        command_three = gtk.MenuItem('Kill Switch')
        command_three.connect('activate', self.kill)
        menu.append(command_three)

        command_four = gtk.MenuItem('Current Sessions')
        command_four.connect('activate', self.list)
        menu.append(command_four)
        
        exittray = gtk.MenuItem('Exit Tray')                    
        exittray.connect('activate', self.quit)                      
        menu.append(exittray)

        menu.show_all()
        return menu

    def connect(self, source):
        sessionStart = os.popen("openvpn3 session-start --config {0}".format(OVPN_CONFIG)).read()
        notifySessionStart = notify.Notification.new(sessionStart)
        notifySessionStart.set_urgency(1)
        notifySessionStart.show()
        self.indicator.set_icon(ICON_PATH+"/nm-vpn-active-lock-symbolic.svg")

    def disconnect(self, source):
        sessionStop = os.popen("openvpn3 session-manage --disconnect --config {0}".format(OVPN_CONFIG)).read()
        notifySessionStop = notify.Notification.new(sessionStop)
        notifySessionStop.set_urgency(1)
        notifySessionStop.show()
        self.indicator.set_icon(ICON_PATH+"/nm-vpn-connecting01-symbolic.svg")

    def kill(self, source):
        sessionsKill = os.popen("sudo kill -9 $(ps aux | grep openvpn3-servic | awk '{print $2}')")
        noitfySessionsKill = notify.Notification.new(sessionsKill)
        notifySessionsKill.set_urgency(1)
        notifySessionsKill.show()
        self.indicator.set_icon(ICON_PATH+"/nm-vpn-connecting01-symbolic.svg")

    def list(self, source):
        sessionsList = os.popen("openvpn3 sessions-list").read()
        notifySessionsList = notify.Notification.new(sessionsList)
        notifySessionsList.set_urgency(1)             
        notifySessionsList.show()

    def quit(self, source):
        gtk.main_quit()

Indicator()
signal.signal(signal.SIGINT, signal.SIG_DFL)
gtk.main()
